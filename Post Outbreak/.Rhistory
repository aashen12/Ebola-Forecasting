chars[i]<-x[i]
} else if(x[i]=="TRUE"){
chars[i]<-x[i]
} else if(x[i]=="FALSE"){
chars[i]<-x[i]
} else{
n<-as.numeric(x[i])
if(n %% 1 == 0) {
#integer
ints[i]<-n
} else{
#dbl
dbl[i]<-n
}
}
}
if(sort==T){
return(list("integers"=sort(ints),"doubles"=sort(dbl),"character"=sort(chars)))
} else{
return(list("integers"=ints,"doubles"=dbl,"character"=chars))
}
}
x <- c("a", "1", "2.2", "house", "3.4", "6")
by_type(x)
set.seed(1)
x <- sample(c(1:10, (1:10)*0.3, letters[1:10]))
by_type(x)
by_type(x, sort = TRUE)
x <- 10:1
by_type(x, sort = TRUE)
x <- logical(5)
by_type(x)
x <- seq(0,4,by = 0.2)
by_type(x)
x <- c("house", "6", "2.2", "a", "3.4", "1")
by_type(x)
by_type<-function(x,sort=F){
x<-as.character(x)
chars<-dbl<-ints<-rep(NA,length(x))
for(i in seq_len(length(x))){
if(is.na(suppressWarnings(as.numeric(x[i])))) {
chars[i]<-x[i]
} else if(x[i]=="TRUE"){
chars[i]<-x[i]
} else if(x[i]=="FALSE"){
chars[i]<-x[i]
} else{
n<-as.numeric(x[i])
if(n %% 1 == 0) {
#integer
ints[i]<-n
} else{
#dbl
dbl[i]<-n
}
}
}
if(sort==T){
return(list("integers"=sort(ints),"doubles"=sort(dbl),"character"=sort(chars)))
} else{
return(list("integers"=ints,"doubles"=dbl,"character"=chars))
}
}
x <- c("a", "1", "2.2", "house", "3.4", "6")
by_type(x)
by_type<-function(x,sort=F){
x<-as.character(x)
chars<-dbl<-ints<-rep(NA,length(x))
for(i in seq_len(length(x))){
if(is.na(suppressWarnings(as.numeric(x[i])))) {
chars[i]<-x[i]
} else if(x[i]=="TRUE"){
chars[i]<-x[i]
} else if(x[i]=="FALSE"){
chars[i]<-x[i]
} else{
n<-as.numeric(x[i])
if(n %% 1 == 0) {
#integer
ints[i]<-n
} else{
#dbl
dbl[i]<-n
}
}
}
if(sort==T){
return(list("integers"=sort(ints),"doubles"=sort(dbl),"character"=sort(chars)))
} else{
return(list("integers"=ints,"doubles"=dbl,"character"=chars))
}
}
x <- c("a", "1", "2.2", "house", "3.4", "6")
by_type(x)
by_type<-function(x,sort=F){
x<-as.character(x)
chars<-dbl<-ints<-rep(NA,length(x))
for(i in seq_len(length(x))){
if(is.na(suppressWarnings(as.numeric(x[i])))) {
chars[i]<-x[i]
} else if(x[i]=="TRUE"){
chars[i]<-x[i]
} else if(x[i]=="FALSE"){
chars[i]<-x[i]
} else{
n<-as.numeric(x[i])
if(n %% 1 == 0) {
#integer
ints[i]<-n
} else{
#dbl
dbl[i]<-n
}
}
}
ints<-na.omit(ints)
dbl<-na.omit(dbl)
chars<-na.omit(chars)
if(sort==T){
return(list("integers"=sort(ints),"doubles"=sort(dbl),"character"=sort(chars)))
} else{
return(list("integers"=ints,"doubles"=dbl,"character"=chars))
}
}
x <- c("a", "1", "2.2", "house", "3.4", "6")
by_type(x)
by_type<-function(x,sort=F){
x<-as.character(x)
chars<-dbl<-ints<-c()
for(i in seq_len(length(x))){
if(is.na(suppressWarnings(as.numeric(x[i])))) {
chars<-c(chars,x[i])
} else if(x[i]=="TRUE"){
chars<-c(chars,x[i])
} else if(x[i]=="FALSE"){
chars<-c(chars,x[i])
} else{
n<-as.numeric(x[i])
if(n %% 1 == 0) {
#integer
ints<-c(ints,n)
} else{
#dbl
ints<-c(ints,n)
}
}
}
if(sort==T){
return(list("integers"=sort(ints),"doubles"=sort(dbl),"character"=sort(chars)))
} else{
return(list("integers"=ints,"doubles"=dbl,"character"=chars))
}
}
x <- c("a", "1", "2.2", "house", "3.4", "6")
by_type(x)
by_type<-function(x,sort=F){
x<-as.character(x)
chars<-dbl<-ints<-c()
for(i in seq_len(length(x))){
if(is.na(suppressWarnings(as.numeric(x[i])))) {
chars<-c(chars,x[i])
} else if(x[i]=="TRUE"){
chars<-c(chars,x[i])
} else if(x[i]=="FALSE"){
chars<-c(chars,x[i])
} else{
n<-as.numeric(x[i])
if(n %% 1 == 0) {
#integer
ints<-c(ints,n)
} else{
#dbl
dbl<-c(dbl,n)
}
}
}
if(sort==T){
return(list("integers"=sort(ints),"doubles"=sort(dbl),"character"=sort(chars)))
} else{
return(list("integers"=ints,"doubles"=dbl,"character"=chars))
}
}
x <- c("a", "1", "2.2", "house", "3.4", "6")
by_type(x)
set.seed(1)
x <- sample(c(1:10, (1:10)*0.3, letters[1:10]))
by_type(x)
by_type(x, sort = TRUE)
x <- 10:1
by_type(x, sort = TRUE)
x <- logical(5)
by_type(x)
x <- seq(0,4,by = 0.2)
by_type(x)
x <- c("house", "6", "2.2", "a", "3.4", "1")
by_type(x)
c()
install.packages("zoo")
install.packages("zoo")
install.packages("Metrics")
sum
knitr::opts_chunk$set(echo = FALSE)
rm(list=ls())
source("outbreak_vis.R") #script with functions
rgx <- "\\d{1,2}\\/\\d{1,2}\\/\\d{4}" #date structure regex
# Complete Outbreak Dataset
# Used to plot the actual number of infections over time
# read in data that is the actual case counts
actual <- read.csv("/Volumes/GoogleDrive/.shortcut-targets-by-id/15UGkfREtfqH3LdfHmCsSpFJ5SrTnSeyt/ebola/2020-05-04_ebola/2020-05-04_data.csv")
# data manipulation
actual <- actual[str_detect(actual$Date, rgx),] #omits rows without a date
colnames(actual) <- c("date", "cases")
actual$date <- mdy(actual$date) #converts into a consistent date format
actual$cases[is.na(actual$cases)] <- 0
actual <- actual %>% mutate(total = cumsum(cases))
# extract the last date and case from the actual case counts
last_date <- actual$date[length(actual$date)]
last_case <- actual$total[length(actual$total)]
# Recursive Projections Dataset
# read in data
rproj <- read.csv("/Volumes/GoogleDrive/.shortcut-targets-by-id/1LaD1nL_OAOposW2fr2XDcs6BLHVBC-jA/2019 Ebola/Post-Outbreak Analysis/recursive_post_proj.csv") #forecasted values
# data manipulation
rproj <- rproj %>% select(date_last_case, pred.7, pred.14, pred.21)
rproj$date_last_case <- mdy(rproj$date_last_case)
rproj <- na.omit(rproj) # some dates have no projections
# rproj <- rproj %>% distinct()
rownames(rproj) <- 1:nrow(rproj)
rdates <- as.character(rproj$date_last_case)
rpreds <- t(rproj %>% select(pred.7,pred.14,pred.21))
# note the dates of the datasets are missing forecasts
# these are the ones to omit from Hawkes
omit_h <- c(8,17,22,33,47:49,51,52,55,56,60,64,69,77)
# Hawkes Projections Dataset
# read in data
hproj <- read.csv("/Volumes/GoogleDrive/.shortcut-targets-by-id/1LaD1nL_OAOposW2fr2XDcs6BLHVBC-jA/2019 Ebola/Post-Outbreak Analysis/hawkes_post_proj.csv") #forecasted values
hproj <- hproj %>% select(date_last_case, pred.7, pred.14, pred.21) #selecting only the cols with forecasts
hproj$date_last_case <- mdy(hproj$date_last_case)
hproj <- hproj[-omit_h,] #omit the rows that aren't also in recursive
# hproj <- hproj %>% distinct()
rownames(hproj) <- 1:nrow(hproj)
hdates <- as.character(hproj$date_last_case) #for working with dates
hpreds <- t(hproj %>% select(pred.7,pred.14,pred.21)) #take t() for the function
fig <- 1 # for numbering the figures in the plots
# create the plot
title <- paste0("Figure ",fig,": Hawkes 7-Day Forecasts for All Datasets")
mod <- single_forecast(hdates, hpreds, days = 7,  title = title, res = TRUE)
mod <- single_forecast(hdates, hpreds, days = 7,  title = title, res = TRUE)
knitr::opts_chunk$set(echo = FALSE)
rm(list=ls())
source("outbreak_vis.R") #script with functions
rgx <- "\\d{1,2}\\/\\d{1,2}\\/\\d{4}" #date structure regex
# Complete Outbreak Dataset
# Used to plot the actual number of infections over time
# read in data that is the actual case counts
actual <- read.csv("/Volumes/GoogleDrive/.shortcut-targets-by-id/15UGkfREtfqH3LdfHmCsSpFJ5SrTnSeyt/ebola/2020-05-04_ebola/2020-05-04_data.csv")
# data manipulation
actual <- actual[str_detect(actual$Date, rgx),] #omits rows without a date
colnames(actual) <- c("date", "cases")
actual$date <- mdy(actual$date) #converts into a consistent date format
actual$cases[is.na(actual$cases)] <- 0
actual <- actual %>% mutate(total = cumsum(cases))
# extract the last date and case from the actual case counts
last_date <- actual$date[length(actual$date)]
last_case <- actual$total[length(actual$total)]
# Recursive Projections Dataset
# read in data
rproj <- read.csv("/Volumes/GoogleDrive/.shortcut-targets-by-id/1LaD1nL_OAOposW2fr2XDcs6BLHVBC-jA/2019 Ebola/Post-Outbreak Analysis/recursive_post_proj.csv") #forecasted values
# data manipulation
rproj <- rproj %>% select(date_last_case, pred.7, pred.14, pred.21)
rproj$date_last_case <- mdy(rproj$date_last_case)
rproj <- na.omit(rproj) # some dates have no projections
# rproj <- rproj %>% distinct()
rownames(rproj) <- 1:nrow(rproj)
rdates <- as.character(rproj$date_last_case)
rpreds <- t(rproj %>% select(pred.7,pred.14,pred.21))
# note the dates of the datasets are missing forecasts
# these are the ones to omit from Hawkes
omit_h <- c(8,17,22,33,47:49,51,52,55,56,60,64,69,77)
# Hawkes Projections Dataset
# read in data
hproj <- read.csv("/Volumes/GoogleDrive/.shortcut-targets-by-id/1LaD1nL_OAOposW2fr2XDcs6BLHVBC-jA/2019 Ebola/Post-Outbreak Analysis/hawkes_post_proj.csv") #forecasted values
hproj <- hproj %>% select(date_last_case, pred.7, pred.14, pred.21) #selecting only the cols with forecasts
hproj$date_last_case <- mdy(hproj$date_last_case)
hproj <- hproj[-omit_h,] #omit the rows that aren't also in recursive
# hproj <- hproj %>% distinct()
rownames(hproj) <- 1:nrow(hproj)
hdates <- as.character(hproj$date_last_case) #for working with dates
hpreds <- t(hproj %>% select(pred.7,pred.14,pred.21)) #take t() for the function
fig <- 1 # for numbering the figures in the plots
# create the plot
title <- paste0("Figure ",fig,": Hawkes 7-Day Forecasts for All Datasets")
mod <- single_forecast(hdates, hpreds, days = 7,  title = title, res = TRUE)
knitr::opts_chunk$set(echo = FALSE)
rm(list=ls())
source("outbreak_vis.R") #script with functions
rgx <- "\\d{1,2}\\/\\d{1,2}\\/\\d{4}" #date structure regex
# Complete Outbreak Dataset
# Used to plot the actual number of infections over time
# read in data that is the actual case counts
actual <- read.csv("/Volumes/GoogleDrive/.shortcut-targets-by-id/15UGkfREtfqH3LdfHmCsSpFJ5SrTnSeyt/ebola/2020-05-04_ebola/2020-05-04_data.csv")
# data manipulation
actual <- actual[str_detect(actual$Date, rgx),] #omits rows without a date
colnames(actual) <- c("date", "cases")
actual$date <- mdy(actual$date) #converts into a consistent date format
actual$cases[is.na(actual$cases)] <- 0
actual <- actual %>% mutate(total = cumsum(cases))
# extract the last date and case from the actual case counts
last_date <- actual$date[length(actual$date)]
last_case <- actual$total[length(actual$total)]
# Recursive Projections Dataset
# read in data
rproj <- read.csv("/Volumes/GoogleDrive/.shortcut-targets-by-id/1LaD1nL_OAOposW2fr2XDcs6BLHVBC-jA/2019 Ebola/Post-Outbreak Analysis/recursive_post_proj.csv") #forecasted values
# data manipulation
rproj <- rproj %>% select(date_last_case, pred.7, pred.14, pred.21)
rproj$date_last_case <- mdy(rproj$date_last_case)
rproj <- na.omit(rproj) # some dates have no projections
# rproj <- rproj %>% distinct()
rownames(rproj) <- 1:nrow(rproj)
rdates <- as.character(rproj$date_last_case)
rpreds <- t(rproj %>% select(pred.7,pred.14,pred.21))
# note the dates of the datasets are missing forecasts
# these are the ones to omit from Hawkes
omit_h <- c(8,17,22,33,47:49,51,52,55,56,60,64,69,77)
# Hawkes Projections Dataset
# read in data
hproj <- read.csv("/Volumes/GoogleDrive/.shortcut-targets-by-id/1LaD1nL_OAOposW2fr2XDcs6BLHVBC-jA/2019 Ebola/Post-Outbreak Analysis/hawkes_post_proj.csv") #forecasted values
hproj <- hproj %>% select(date_last_case, pred.7, pred.14, pred.21) #selecting only the cols with forecasts
hproj$date_last_case <- mdy(hproj$date_last_case)
hproj <- hproj[-omit_h,] #omit the rows that aren't also in recursive
# hproj <- hproj %>% distinct()
rownames(hproj) <- 1:nrow(hproj)
hdates <- as.character(hproj$date_last_case) #for working with dates
hpreds <- t(hproj %>% select(pred.7,pred.14,pred.21)) #take t() for the function
fig <- 1 # for numbering the figures in the plots
# create the plot
title <- paste0("Figure ",fig,": Hawkes 7-Day Forecasts for All Datasets")
mod <- single_forecast(hdates, hpreds, days = 7,  title = title, res = TRUE)
actual
# specify constants
## days in 1, 2, and 3 weeks
n_days_week <- 7
one_week <- 1 * n_days_week
two_weeks <- 2 * n_days_week
three_weeks <- 3 * n_days_week
rm(list=ls())
source("outbreak_vis.R") #script with functions
rgx <- "\\d{1,2}\\/\\d{1,2}\\/\\d{4}" #date structure regex
# Complete Outbreak Dataset
# Used to plot the actual number of infections over time
# read in data that is the actual case counts
actual <- read.csv("/Volumes/GoogleDrive/.shortcut-targets-by-id/15UGkfREtfqH3LdfHmCsSpFJ5SrTnSeyt/ebola/2020-05-04_ebola/2020-05-04_data.csv")
# data manipulation
actual <- actual[str_detect(actual$Date, rgx),] #omits rows without a date
colnames(actual) <- c("date", "cases")
actual$date <- mdy(actual$date) #converts into a consistent date format
actual$cases[is.na(actual$cases)] <- 0
actual <- actual %>% mutate(total = cumsum(cases))
# extract the last date and case from the actual case counts
last_date <- actual$date[length(actual$date)]
last_case <- actual$total[length(actual$total)]
# Recursive Projections Dataset
# read in data
rproj <- read.csv("/Volumes/GoogleDrive/.shortcut-targets-by-id/1LaD1nL_OAOposW2fr2XDcs6BLHVBC-jA/2019 Ebola/Post-Outbreak Analysis/recursive_post_proj.csv") #forecasted values
# data manipulation
rproj <- rproj %>% select(date_last_case, pred.7, pred.14, pred.21)
rproj$date_last_case <- mdy(rproj$date_last_case)
rproj <- na.omit(rproj) # some dates have no projections
# rproj <- rproj %>% distinct()
rownames(rproj) <- 1:nrow(rproj)
rdates <- as.character(rproj$date_last_case)
rpreds <- t(rproj %>% select(pred.7,pred.14,pred.21))
# note the dates of the datasets are missing forecasts
# these are the ones to omit from Hawkes
omit_h <- c(8,17,22,33,47:49,51,52,55,56,60,64,69,77)
# Hawkes Projections Dataset
# read in data
hproj <- read.csv("/Volumes/GoogleDrive/.shortcut-targets-by-id/1LaD1nL_OAOposW2fr2XDcs6BLHVBC-jA/2019 Ebola/Post-Outbreak Analysis/hawkes_post_proj.csv") #forecasted values
hproj <- hproj %>% select(date_last_case, pred.7, pred.14, pred.21) #selecting only the cols with forecasts
hproj$date_last_case <- mdy(hproj$date_last_case)
hproj <- hproj[-omit_h,] #omit the rows that aren't also in recursive
# hproj <- hproj %>% distinct()
rownames(hproj) <- 1:nrow(hproj)
hdates <- as.character(hproj$date_last_case) #for working with dates
hpreds <- t(hproj %>% select(pred.7,pred.14,pred.21)) #take t() for the function
fig <- 1 # for numbering the figures in the plots
# create the plot
title <- paste0("Figure ",fig,": Hawkes 7-Day Forecasts for All Datasets")
mod <- single_forecast(hdates, hpreds, days = 7,  title = title, res = TRUE)
mod <- single_forecast(hdates, hpreds, days = 7,  title = title, res = TRUE)
knitr::opts_chunk$set(echo = FALSE)
rm(list=ls())
source("outbreak_vis.R") #script with functions
rgx <- "\\d{1,2}\\/\\d{1,2}\\/\\d{4}" #date structure regex
# Complete Outbreak Dataset
# Used to plot the actual number of infections over time
# read in data that is the actual case counts
actual <- read.csv("/Volumes/GoogleDrive/.shortcut-targets-by-id/15UGkfREtfqH3LdfHmCsSpFJ5SrTnSeyt/ebola/2020-05-04_ebola/2020-05-04_data.csv")
# data manipulation
actual <- actual[str_detect(actual$Date, rgx),] #omits rows without a date
colnames(actual) <- c("date", "cases")
actual$date <- mdy(actual$date) #converts into a consistent date format
actual$cases[is.na(actual$cases)] <- 0
actual <- actual %>% mutate(total = cumsum(cases))
# extract the last date and case from the actual case counts
last_date <- actual$date[length(actual$date)]
last_case <- actual$total[length(actual$total)]
# Recursive Projections Dataset
# read in data
rproj <- read.csv("/Volumes/GoogleDrive/.shortcut-targets-by-id/1LaD1nL_OAOposW2fr2XDcs6BLHVBC-jA/2019 Ebola/Post-Outbreak Analysis/recursive_post_proj.csv") #forecasted values
# data manipulation
rproj <- rproj %>% select(date_last_case, pred.7, pred.14, pred.21)
rproj$date_last_case <- mdy(rproj$date_last_case)
rproj <- na.omit(rproj) # some dates have no projections
# rproj <- rproj %>% distinct()
rownames(rproj) <- 1:nrow(rproj)
rdates <- as.character(rproj$date_last_case)
rpreds <- t(rproj %>% select(pred.7,pred.14,pred.21))
# note the dates of the datasets are missing forecasts
# these are the ones to omit from Hawkes
omit_h <- c(8,17,22,33,47:49,51,52,55,56,60,64,69,77)
# Hawkes Projections Dataset
# read in data
hproj <- read.csv("/Volumes/GoogleDrive/.shortcut-targets-by-id/1LaD1nL_OAOposW2fr2XDcs6BLHVBC-jA/2019 Ebola/Post-Outbreak Analysis/hawkes_post_proj.csv") #forecasted values
hproj <- hproj %>% select(date_last_case, pred.7, pred.14, pred.21) #selecting only the cols with forecasts
hproj$date_last_case <- mdy(hproj$date_last_case)
hproj <- hproj[-omit_h,] #omit the rows that aren't also in recursive
# hproj <- hproj %>% distinct()
rownames(hproj) <- 1:nrow(hproj)
hdates <- as.character(hproj$date_last_case) #for working with dates
hpreds <- t(hproj %>% select(pred.7,pred.14,pred.21)) #take t() for the function
fig <- 1 # for numbering the figures in the plots
# create the plot
title <- paste0("Figure ",fig,": Hawkes 7-Day Forecasts for All Datasets")
mod <- single_forecast(hdates, hpreds, days = 7,  title = title, res = TRUE)
df
df
View(df)
View(data)
View(date_list)
View(date_vecl)
gfull <- ggplot(
data = data[(data$date < (as.Date(max_date) + ahead)) & (data$date > (as.Date(min_date) - back)),], #range is 28 days ahead and 14 days behind
mapping = aes(x = date, y = total)
) +
geom_line() +
geom_vline(xintercept = as.Date(date_vec), col = "gray75") +  #line at each date forecasted
#adds points at each date
geom_point(data = df,
mapping = aes(x = as.Date(dfdate), y = forecast_total),
color = col,
size = size_point) +
#no vertical lines here
geom_path(data = df,
aes(x = as.Date(dfdate), y = forecast_total),
color = col,
#linetype = "dashed",
size = size_point - 2.2) +
labs(caption = title) +
theme(legend.position = "bottom", plot.caption = element_text(hjust = 0.5)) +
scale_x_date(date_breaks = "5 months", date_labels = "%b-%y") +
theme_light()
View(gfull)
gfull
knitr::opts_chunk$set(echo = FALSE)
rm(list=ls())
source("outbreak_vis.R") #script with functions
rgx <- "\\d{1,2}\\/\\d{1,2}\\/\\d{4}" #date structure regex
# Complete Outbreak Dataset
# Used to plot the actual number of infections over time
# read in data that is the actual case counts
actual <- read.csv("/Volumes/GoogleDrive/.shortcut-targets-by-id/15UGkfREtfqH3LdfHmCsSpFJ5SrTnSeyt/ebola/2020-05-04_ebola/2020-05-04_data.csv")
# data manipulation
actual <- actual[str_detect(actual$Date, rgx),] #omits rows without a date
colnames(actual) <- c("date", "cases")
actual$date <- mdy(actual$date) #converts into a consistent date format
actual$cases[is.na(actual$cases)] <- 0
actual <- actual %>% mutate(total = cumsum(cases))
# extract the last date and case from the actual case counts
last_date <- actual$date[length(actual$date)]
last_case <- actual$total[length(actual$total)]
# Recursive Projections Dataset
# read in data
rproj <- read.csv("/Volumes/GoogleDrive/.shortcut-targets-by-id/1LaD1nL_OAOposW2fr2XDcs6BLHVBC-jA/2019 Ebola/Post-Outbreak Analysis/recursive_post_proj.csv") #forecasted values
# data manipulation
rproj <- rproj %>% select(date_last_case, pred.7, pred.14, pred.21)
rproj$date_last_case <- mdy(rproj$date_last_case)
rproj <- na.omit(rproj) # some dates have no projections
# rproj <- rproj %>% distinct()
rownames(rproj) <- 1:nrow(rproj)
rdates <- as.character(rproj$date_last_case)
rpreds <- t(rproj %>% select(pred.7,pred.14,pred.21))
# note the dates of the datasets are missing forecasts
# these are the ones to omit from Hawkes
omit_h <- c(8,17,22,33,47:49,51,52,55,56,60,64,69,77)
# Hawkes Projections Dataset
# read in data
hproj <- read.csv("/Volumes/GoogleDrive/.shortcut-targets-by-id/1LaD1nL_OAOposW2fr2XDcs6BLHVBC-jA/2019 Ebola/Post-Outbreak Analysis/hawkes_post_proj.csv") #forecasted values
hproj <- hproj %>% select(date_last_case, pred.7, pred.14, pred.21) #selecting only the cols with forecasts
hproj$date_last_case <- mdy(hproj$date_last_case)
hproj <- hproj[-omit_h,] #omit the rows that aren't also in recursive
# hproj <- hproj %>% distinct()
rownames(hproj) <- 1:nrow(hproj)
hdates <- as.character(hproj$date_last_case) #for working with dates
hpreds <- t(hproj %>% select(pred.7,pred.14,pred.21)) #take t() for the function
fig <- 1 # for numbering the figures in the plots
# create the plot
title <- paste0("Figure ",fig,": Hawkes 7-Day Forecasts for All Datasets")
mod <- single_forecast(hdates, hpreds, days = 7,  title = title, res = TRUE)
mod$plot
# extract 7-day Hawkes RMSE
rmse_h7 <- mod$rmse
mod
